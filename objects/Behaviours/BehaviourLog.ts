import { BaseComponent } from "../API/BaseComponent";
import { DATE, JSON_DATE, ID, IS_AN } from "../API/Functions";
import { IBelongAsset } from "../API/Interfaces/IBelongAsset";
import { IBelongCompany } from "../API/Interfaces/IBelongCompany";
import { IIdUlong } from "../API/Interfaces/IIdUlong";
import { uint, ulong } from "../API/Types";
import { Asset } from "../Assets/Asset";
import { Company } from "../Companies/Company";
import { ASSETS, BEHAVIOUR_SCRIPTS, BEHAVIOURS, COMPANIES } from "../Storage";
import { Behaviour } from "./Behaviour";
import { BehaviourLogType } from "./BehaviourLogType";
import { BehaviourScript } from "./BehaviourScript";

/**
 * A debug message available to script writers to help debug and trace output from a BehaviourScript.
*/
export class BehaviourLog
	extends BaseComponent
	implements IIdUlong, IBelongCompany, IBelongAsset {
	/**
	 * Unique identifier of this log message.
	 */
	id: ulong = NaN;
	/**
	 * The asset which whose behaviours created this log entry.
	 * {@link Asset.id}
	 */
	assetId: ulong = NaN;
	/**
	 * The company to which this log message belongs.
	 * {@link Company.id}
	 */
	get asset(): Asset { return ASSETS.get(this.assetId) as Asset; }
	/**
	 * The company to which this log message belongs.
	 * {@link Company.id}
	 */
	companyId: ulong = NaN;
	/**
	 * The company to which this log message belongs.
	 * {@link Company.id}
	 */
	get company(): Company { return COMPANIES.get(this.companyId) as Company; }
	/**
	 * The behaviour to which this log message belongs.
	 * {@link Behaviour.id}
	 */
	behaviourId: ulong = NaN;
	/**
	 * The behaviour to which this log message belongs.
	 * {@link Behaviour.id}
	 */
	get behaviour(): Behaviour { return BEHAVIOURS.get(this.behaviourId) as Behaviour; }
	/**
	 * The script which generated this log message.
	 * {@link BehaviourScript.id}
	 */
	scriptId: ulong = NaN;
	/**
	 * The script which generated this log message.
	 * {@link BehaviourScript.id}
	 */
	get script(): BehaviourScript { return BEHAVIOUR_SCRIPTS.get(this.scriptId) as BehaviourScript; }
	/**
	 * The category of message.
	 */
	kind: BehaviourLogType = BehaviourLogType.log;
	/**
	 * When the log entry was generated by the script.
	 */
	dts: Date = DATE();
	/**
	 * The body of the message.
	 */
	message: string = "";
	/**
	 * The line number of the script which generated this message.
	 */
	line: uint = NaN;
	/**
	 * The character column where the error was generated.
	 */
	character: uint = NaN;

	override toJSON() {
		return {
			"id": this.id || null,
			"v": this.v,
			"asset": this.assetId || null,
			"company": this.companyId || null,
			"behaviour": this.behaviourId || null,
			"script": this.scriptId || null,
			"kind": BehaviourLogType[this.kind] || BehaviourLogType.log,
			"dts": JSON_DATE(this.dts),
			"message": this.message || "",
			"line": this.line || -1,
			"character": this.character || -1,
		};
	}
	override fromJSON(json: any, force?: boolean): boolean {
		const update = this.updateVersion(json?.["v"]) || !!(force && json);
		if (update) {
			if (!IS_AN(this.id)) this.id = ID(json["id"]);
			this.assetId = ID(json["asset"]);
			this.companyId = ID(json["company"]);
			this.behaviourId = ID(json["behaviour"]);
			this.scriptId = ID(json["script"]);
			this.kind = BehaviourLogType[json["kind"] as BehaviourLogType] || BehaviourLogType.log;
			this.dts = DATE(json["dts"]);
			this.message = json["message"] || "";
			this.line = ID(json["line"]);
			this.character = ID(json["character"]);
		}
		return update;
	}
	// IRequestable
	/**
	 * The {@link id} is the key.
	 */
	getKey(): string { return this.id.toString(); }
}